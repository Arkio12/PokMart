generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Pokemon {
  id          String        @id @default(cuid())
  name        String        @unique
  image       String
  price       Float
  description String
  inStock     Boolean       @default(true)
  featured    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  hp          Int
  attack      Int
  defense     Int
  speed       Int
  cartItems   CartItem[]
  orders      OrderItem[]
  types       PokemonType[]

  @@map("pokemon")
}

model PokemonType {
  id        String  @id @default(cuid())
  type      String
  pokemonId String
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@map("pokemon_types")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
  orders    Order[]

  @@map("users")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  pokemonId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@unique([cartId, pokemonId])
  @@map("cart_items")
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  pokemonId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
